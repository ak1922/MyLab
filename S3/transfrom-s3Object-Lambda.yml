AWSTemplateFormatVersion: 2010-09-09
Description: |
  Create s3 bucket, use Lambda function to transform content

#Parameters:
  
Resources:
  
  rS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketName: ak-lambda-tranf-01
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      Tags:
        - Key: Name
          Value: s3LambdaTransform

  rS3AccessPoint:
    Type: AWS::S3::AccessPoint
    Properties: 
      Bucket: !Ref rS3Bucket
      Name: !Join [ "-", [ !Ref rS3Bucket, "ap" ] ]


  rIAMRole:
    Type: AWS::IAM::Role
    Properties:
      Description: IAM role for Lambda to s3
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - sts:AssumeRole
          Principal:
            Service:
            - lambda.amazonaws.com
      Policies:
        - PolicyName: s3LambdaTransformPolicy
          PolicyDocument: 
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              - s3-object-lambda:WriteGetObjectResponse
              Resource: "*"
      RoleName: s3LambdaTransformRole
      Tags:
        - Key: Name
          Value: s3LambdaTransform

  rs3LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Lambda code to stop instances
      FunctionName: s3LambdaFunc
      Role: !GetAtt rIAMRole.Arn
      Runtime: python3.9
      Handler: s3LambdaFunc_handler.lambda_handler
      Code: 
        ZipFile: |  
          import boto3
          import requests
          from botocore.config import Config

          # This function capitalizes all text in the original object

          def lambda_handler(event, context):
              object_context = event["getObjectContext"]

          # Get the presigned URL to fetch the requested original object from S3

              s3_url = object_context["inputS3Url"]

          # Extract the route and request token from the input context

              request_route = object_context["outputRoute"]
              request_token = object_context["outputToken"]

          # Get the original S3 object using the presigned URL
              response = requests.get(s3_url)
              original_object = response.content.decode("utf-8")

          # Transform all text in the original object to uppercase. You can replace it with your custom code based on your use case
              transformed_object = original_object.upper()

          # Write object back to S3 Object Lambda
              s3 = boto3.client('s3', config=Config(signature_version='s3v4'))

          # The WriteGetObjectResponse API sends the transformed data back to S3 Object Lambda and then to the user
              s3.write_get_object_response(
                  Body=transformed_object,
                  RequestRoute = request_route,
                  RequestToken = request_token
              )

          # Exit the Lambda function: return the status code
              return {'status_code': 200}

  rS3BucketLambdaAccessPoint:
    Type: AWS::S3ObjectLambda::AccessPoint
    Properties: 
      Name: acptlb
      ObjectLambdaConfiguration: 
        CloudWatchMetricsEnabled: false
        SupportingAccessPoint: !Ref rS3AccessPoint
        TransformationConfigurations: 
          - Actions: 
              - GetObject
            ContentTransformation: 
              AwsLambda:
                FunctionArn: !GetAtt rs3LambdaFunction.Arn



Outputs:
  rS3AccessPointName:
    Description: Name of s3 access point
    Value: !GetAtt rS3AccessPoint.Name