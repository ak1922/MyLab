AWSTemplateFormatVersion: "2010-09-09"
Description: |
  Creating LAMP stack with Wordpress

Parameters:
  
  pVPC:
    Description: VPC to launch resources into.
    Type: AWS::EC2::VPC::Id

  pKeyPair:
    Description: EC2 instance key
    Type: AWS::EC2::KeyPair::KeyName
  
  pLatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'

  pPublicSubnet:
    Description: Public subnet for Web server clarus-az1b-public
    Type: AWS::EC2::Subnet::Id

  pPrivateSubnet1:
    Description: Private subnet for database server clarus-az1b-private
    Type: AWS::EC2::Subnet::Id

  pPrivateSubnet2:
    Description: Private subnet for ec2 server clarus-az1a-private
    Type: AWS::EC2::Subnet::Id

  pPrivateRouteTable:
    Description: Route table form Claus-vpc-a
    Type: String


Resources:
  
  rWebServerSecGrp:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group to allow SSH on port 22 and HTTP on port 80
      GroupName: Wordpress-BastionHost-SG
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name 
          Value: Wordpress-BastionHost-SG
      VpcId: !Ref pVPC

  rEIPforNatGateway:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name 
          Value: eip1-clarus-vpc

  rNatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt rEIPforNatGateway.AllocationId
      SubnetId: !Ref pPublicSubnet
      Tags:
      - Key: Name
        Value: lampSrv-ngw

  rPrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref pPrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0    
      NatGatewayId: !Ref rNatGateway

  rDatabaseSecGrp:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group to allow MySQL connection on port 3306 and Wordpress-BastionHost-SG for internet connection.
      GroupName: MariaDB-SG
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref rWebServerSecGrp
      Tags:
        - Key: Name 
          Value: MariaDB-SG
      VpcId: !Ref pVPC

  rWebServerInst:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref pLatestAmiId
      InstanceType: t2.micro
      KeyName: !Ref pKeyPair
      SecurityGroupIds:
        - !Ref rWebServerSecGrp
      SubnetId: !Ref pPublicSubnet
      Tags:
        - Key: Name
          Value: LampWebServer
      UserData: !Base64 |
        #!/bin/bash -x
        yum update -y
        amazon-linux-extras install -y lamp-mariadb10.2-php7.2 php7.2
        yum install -y httpd
        systemctl start httpd
        systemctl enable httpd
        wget https://wordpress.org/latest.tar.gz
        tar -xzf latest.tar.gz
        sudo cp -r wordpress/* /var/www/html/
        cd /var/www/html/
        cp wp-config-sample.php wp-config.php
        chown -R apache /var/www
        chgrp -R apache /var/www
        chmod 775 /var/www
        find /var/www -type d -exec sudo chmod 2775 {} \;
        find /var/www -type f -exec sudo chmod 0664 {} \;
        systemctl restart httpd

  rDatabaseInst:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref pLatestAmiId
      InstanceType: t2.micro
      KeyName: !Ref pKeyPair
      SecurityGroupIds:
        - !Ref rDatabaseSecGrp
      SubnetId: !Ref pPrivateSubnet1
      Tags:
        - Key: Name
          Value: MariaDB-Server
      UserData: !Base64 |
        #!/bin/bash -x
        yum update -y
        yum install -y mariadb-server
        systemctl start mariadb
        systemctl enable mariadb

  rEC2Inst:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref pLatestAmiId
      InstanceType: t2.micro
      KeyName: !Ref pKeyPair
      SecurityGroupIds:
        - !Ref rDatabaseSecGrp
      SubnetId: !Ref pPrivateSubnet2
      Tags:
        - Key: Name
          Value: clarus-private1a-nacl

  rMyNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
        VpcId: !Ref pVPC
        Tags:
        - Key: Name
          Value: LAMP-NACL

  rInboundRule1:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref rMyNetworkAcl
       RuleNumber: 100
       Protocol: 6
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
       PortRange:
         From: 22
         To: 22
 
  rInboundRule2:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref rMyNetworkAcl
       RuleNumber: 200
       Protocol: 1
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
       Icmp:
        Code: -1
        Type: -1

  OutboundRule1:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref rMyNetworkAcl
       RuleNumber: 100
       Protocol: 6
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
       PortRange:
         From: 22
         To: 22

  OutboundRule2:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref rMyNetworkAcl
       RuleNumber: 200
       Protocol: 1
       RuleAction: deny
       CidrBlock: 0.0.0.0/0
       Icmp:
        Code: -1
        Type: -1

#Outputs: